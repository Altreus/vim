# #!/usr/bin/perl
snippet #!
	#!/usr/bin/perl
	
# Hash Pointer
snippet .
	 =>
# Function
snippet sub
	sub ${1:function_name} {
		${2:#body ...}
	}
# Conditional
snippet if
	if (${1}) {
		${2:# body...}
	}
# Conditional if..else
snippet ife
	if (${1}) {
		${2:# body...}
	} else {
		${3:# else...}
	}
# Conditional if..elsif..else
snippet ifee
	if (${1}) {
		${2:# body...}
	} elsif (${3}) {
		${4:# elsif...}
	} else {
		${5:# else...}
	}
# Conditional One-line
snippet xif
	${1:expression} if ${2:condition};
# Unless conditional One-line
snippet unless
	${1:expression} unless ${2:condition};${3}
# Try/Except
snippet eval
	eval {
		${1:# do something risky...}
	};
	if ($@) {
		${2:# handle failure...}
	}
# While Loop
snippet wh
	while (${1}) {
		${2:# body...}
	}
# While Loop One-line
snippet xwh
	${1:expression} while ${2:condition};${3}
# C-style For Loop
snippet cfor
	for (my $${2:var} = 0; $$2 < ${1:count}; $$2${3:++}) {
		${4:# body...}
	}
# For Loop
snippet for
	for my $${1:x} (@${2:array}) {
		${3:# body...}
	}
# Post-For Loop
snippet xfor
	${1:expression} for @${2:array};${3}
# Range For
snippet rfor
	for (${1:0}..${2}) {
	    ${3:# body...}
	}
# Package
snippet cl
	package ${1:ClassName};
	use strict;
	use warnings;
	
	use base qw(${2:ParentClass});
	
	sub new {
		my $class = shift;
		$class = ref $class if ref $class;
		my $self = bless {}, $class;
		$self;
	}
	
	1;${3}
snippet dbic
	package ${1:ClassName};
	use strict;
	use warnings;
	
	use base qw(DBIx::Class::Core ${2:ParentClass});
	
	__PACKAGE__->table('${3:TableName}');
	__PACKAGE__->add_columns(
	    ${4:ColumnName} => {
	        accessor  => '$$4',
		    data_type => '${6:string}',
		    size      => ${7:255},
		    is_nullable => ${8:0},
		    is_auto_increment => ${9:0},
		    default_value => ${10:undef},
	    },
	    ${11}
	);
	1;
snippet PA
	__PACKAGE__
snippet FI
	__FILE__
snippet LI
	__LINE__
snippet END
	__END__
snippet DAT
	__DATA__
snippet script
	#!/usr/bin/perl
	use strict;
	use warnings;
